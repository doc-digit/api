version: '2.4'

services:
  queue:
    image: rabbitmq:3-management
    hostname: queue
    volumes:
      - queue_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - doc_digit_cluster
    environment:
      RABBITMQ_DEFAULT_USER: ${QUEUE_USER}
      RABBITMQ_DEFAULT_PASS: ${QUEUE_PASSWORD}
    healthcheck:
      test: rabbitmqctl eval '
              { true, rabbit_app_booted_and_running } = { rabbit:is_booted(node()), rabbit_app_booted_and_running },
              { [], no_alarms } = { rabbit:alarms(), no_alarms },
              [] /= rabbit_networking:active_listeners(),
              rabbitmq_node_is_healthy.
              ' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  database:
    image: postgres:9.6
    hostname: database
    volumes:
      - db_data:/var/lib/postgres/data
    ports:
      - "5432:5432"
    networks:
      - doc_digit_cluster
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER
      interval: 10s
      timeout: 5s
      retries: 5

  storage:
    image: minio/minio:RELEASE.2019-06-04T01-15-58Z
    hostname: storage
    volumes:
      - storage_data:/data
    ports:
      - "9000:9000"
    networks:
      - doc_digit_cluster
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data

  api:
    build:
      context: .
      dockerfile: Dockerfile.test
    ports:
      - "80:8080"
    networks:
      - doc_digit_cluster
    environment:
      RABBITMQ_URL: amqp://${QUEUE_USER}:${QUEUE_PASSWORD}@queue:5672/%2F
      DB_SERVER: database
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      MINIO_HOST: storage:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      BUCKET_NAME_PDF: ${BUCKET_NAME_PDF}
      BUCKET_NAME_SCAN: ${BUCKET_NAME_SCAN}
    depends_on:
      queue:
        condition: service_healthy
      database:
        condition: service_healthy
      storage:
        condition: service_healthy

volumes:
  queue_data:
    driver: local
  db_data:
    driver: local
  storage_data:
    driver: local

networks:
  doc_digit_cluster:
    driver: bridge
